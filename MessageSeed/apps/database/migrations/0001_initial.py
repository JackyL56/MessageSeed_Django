# Generated by Django 4.1.2 on 2023-01-06 12:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('username', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='author', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('high_score', models.IntegerField(default=0, help_text='The highest score out of all messages this author has posted.')),
            ],
            options={
                'verbose_name': 'author',
                'verbose_name_plural': 'authors',
                'ordering': ['high_score', 'username'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title for the message.', max_length=42, verbose_name='Title')),
                ('message', models.TextField(help_text='Contains the message.', max_length=500)),
                ('post_date', models.DateTimeField(auto_now_add=True, verbose_name='The date of the message when it was posted.')),
                ('death_date', models.DateTimeField(blank=True, verbose_name='Time of Death for the message.')),
                ('latitude', models.DecimalField(decimal_places=15, help_text='Latitude of the location at which this message was posted.', max_digits=18)),
                ('longitude', models.DecimalField(decimal_places=15, help_text='Longitude of the location at which this message was posted.', max_digits=18)),
                ('author', models.ForeignKey(help_text='Author of the message.', on_delete=django.db.models.deletion.CASCADE, related_name='messages', related_query_name='message', to='database.author')),
                ('user_likes', models.ManyToManyField(blank=True, help_text='List of Users who have liked this message.', related_name='messages_liked', to='database.author')),
            ],
            options={
                'verbose_name': 'message',
                'verbose_name_plural': 'messages',
                'ordering': ['post_date', 'author'],
            },
        ),
    ]
